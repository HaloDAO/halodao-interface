/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardsInterface extends ethers.utils.Interface {
  functions: {
    "BPS()": FunctionFragment;
    "DECIMALS()": FunctionFragment;
    "addAmmLp(address,uint256)": FunctionFragment;
    "addMinterCollateralType(address,uint256)": FunctionFragment;
    "ammLpPools(address)": FunctionFragment;
    "ammLpRewardsRatio()": FunctionFragment;
    "ammLpUserInfo(address,address)": FunctionFragment;
    "decayBase()": FunctionFragment;
    "depositAmmLpTokens(address,uint256)": FunctionFragment;
    "depositMinter(address,address,uint256)": FunctionFragment;
    "epochLength()": FunctionFragment;
    "genesisTs()": FunctionFragment;
    "getAmmLpPoolInfo(address)": FunctionFragment;
    "getMinterLpPoolInfo(address)": FunctionFragment;
    "haloChestContract()": FunctionFragment;
    "haloTokenAddress()": FunctionFragment;
    "isValidAmmLp(address)": FunctionFragment;
    "isValidMinterLp(address)": FunctionFragment;
    "lastHaloVestRewardTs()": FunctionFragment;
    "minterContract()": FunctionFragment;
    "minterLpPools(address)": FunctionFragment;
    "minterLpRewardsRatio()": FunctionFragment;
    "minterLpUserInfo(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingAmmLpUserRewards(address,address)": FunctionFragment;
    "pendingMinterLpUserRewards(address,address)": FunctionFragment;
    "pendingVestingRewards()": FunctionFragment;
    "releaseVestedRewards()": FunctionFragment;
    "removeAmmLp(address)": FunctionFragment;
    "removeMinterCollateralType(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAmmLpAlloc(address,uint256)": FunctionFragment;
    "setGenesisTs(uint256)": FunctionFragment;
    "setHaloChest(address)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "setMinterLpAlloc(address,uint256)": FunctionFragment;
    "startingRewards()": FunctionFragment;
    "totalAmmLpAllocationPoints()": FunctionFragment;
    "totalAmmLpAllocs()": FunctionFragment;
    "totalMinterLpAllocationPoints()": FunctionFragment;
    "totalMinterLpAllocs()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAmmRewardPool(address)": FunctionFragment;
    "updateMinterRewardPool(address)": FunctionFragment;
    "vestingRewardsDebt()": FunctionFragment;
    "vestingRewardsRatio()": FunctionFragment;
    "withdrawAmmLpTokens(address,uint256)": FunctionFragment;
    "withdrawMinter(address,address,uint256)": FunctionFragment;
    "withdrawPendingAmmLpRewards(address)": FunctionFragment;
    "withdrawPendingMinterLpRewards(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BPS", values?: undefined): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAmmLp",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinterCollateralType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ammLpPools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ammLpRewardsRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ammLpUserInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "decayBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAmmLpTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMinter",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "genesisTs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmmLpPoolInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterLpPoolInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "haloChestContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "haloTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAmmLp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidMinterLp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastHaloVestRewardTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterLpPools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minterLpRewardsRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterLpUserInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAmmLpUserRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMinterLpUserRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingVestingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseVestedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeAmmLp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeMinterCollateralType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmmLpAlloc",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGenesisTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHaloChest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMinterLpAlloc",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmmLpAllocationPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmmLpAllocs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinterLpAllocationPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinterLpAllocs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAmmRewardPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinterRewardPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingRewardsDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingRewardsRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmmLpTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMinter",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPendingAmmLpRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPendingMinterLpRewards",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAmmLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMinterCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ammLpPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ammLpRewardsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ammLpUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decayBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAmmLpTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genesisTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmmLpPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinterLpPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "haloChestContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "haloTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAmmLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidMinterLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHaloVestRewardTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterLpPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterLpRewardsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterLpUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAmmLpUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMinterLpUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingVestingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseVestedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAmmLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinterCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmmLpAlloc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGenesisTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHaloChest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinterLpAlloc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmmLpAllocationPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmmLpAllocs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMinterLpAllocationPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMinterLpAllocs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAmmRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinterRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingRewardsDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingRewardsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmmLpTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPendingAmmLpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPendingMinterLpRewards",
    data: BytesLike
  ): Result;

  events: {
    "AmmRewardPoolUpdated(address,uint256,uint256)": EventFragment;
    "DepositLPTokens(address,address,uint256)": EventFragment;
    "DepositMinter(address,address,uint256)": EventFragment;
    "Log(uint256,uint256)": EventFragment;
    "MinterRewardPoolUpdated(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "VestedRewardsReleased(uint256,uint256)": EventFragment;
    "WithdrawLPTokens(address,address,uint256)": EventFragment;
    "WithdrawMinter(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmmRewardPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositLPTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRewardPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestedRewardsReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLPTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawMinter"): EventFragment;
}

export class Rewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsInterface;

  functions: {
    BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BPS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAmmLp(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAmmLp(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addMinterCollateralType(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMinterCollateralType(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ammLpPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    "ammLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    ammLpRewardsRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ammLpRewardsRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ammLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "ammLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    decayBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decayBase()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    epochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesisTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    "genesisTs()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmmLpPoolInfo(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, BigNumber, BigNumber] & {
          whitelisted: boolean;
          allocPoint: BigNumber;
          lastRewardTs: BigNumber;
          accHaloPerShare: BigNumber;
        }
      ]
    >;

    "getAmmLpPoolInfo(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, BigNumber, BigNumber] & {
          whitelisted: boolean;
          allocPoint: BigNumber;
          lastRewardTs: BigNumber;
          accHaloPerShare: BigNumber;
        }
      ]
    >;

    getMinterLpPoolInfo(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, BigNumber, BigNumber] & {
          whitelisted: boolean;
          allocPoint: BigNumber;
          lastRewardTs: BigNumber;
          accHaloPerShare: BigNumber;
        }
      ]
    >;

    "getMinterLpPoolInfo(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber, BigNumber, BigNumber] & {
          whitelisted: boolean;
          allocPoint: BigNumber;
          lastRewardTs: BigNumber;
          accHaloPerShare: BigNumber;
        }
      ]
    >;

    haloChestContract(overrides?: CallOverrides): Promise<[string]>;

    "haloChestContract()"(overrides?: CallOverrides): Promise<[string]>;

    haloTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "haloTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    isValidAmmLp(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidAmmLp(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidMinterLp(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidMinterLp(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastHaloVestRewardTs(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastHaloVestRewardTs()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minterContract(overrides?: CallOverrides): Promise<[string]>;

    "minterContract()"(overrides?: CallOverrides): Promise<[string]>;

    minterLpPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    "minterLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    minterLpRewardsRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minterLpRewardsRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minterLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "minterLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingAmmLpUserRewards(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingAmmLpUserRewards(address,address)"(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMinterLpUserRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingMinterLpUserRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingVestingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pendingVestingRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseVestedRewards(overrides?: Overrides): Promise<ContractTransaction>;

    "releaseVestedRewards()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAmmLp(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAmmLp(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinterCollateralType(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinterCollateralType(address)"(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAmmLpAlloc(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAmmLpAlloc(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGenesisTs(
      _genesisTs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGenesisTs(uint256)"(
      _genesisTs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setHaloChest(
      _haloChest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setHaloChest(address)"(
      _haloChest: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinter(
      _minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinter(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinterLpAlloc(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinterLpAlloc(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startingRewards()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmmLpAllocationPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAmmLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAmmLpAllocs(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAmmLpAllocs()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalMinterLpAllocationPoints(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalMinterLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalMinterLpAllocs(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalMinterLpAllocs()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAmmRewardPool(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAmmRewardPool(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMinterRewardPool(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMinterRewardPool(address)"(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vestingRewardsDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vestingRewardsDebt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingRewardsRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vestingRewardsRatio()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawPendingAmmLpRewards(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawPendingAmmLpRewards(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawPendingMinterLpRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawPendingMinterLpRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  BPS(overrides?: CallOverrides): Promise<BigNumber>;

  "BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAmmLp(
    _lpAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAmmLp(address,uint256)"(
    _lpAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addMinterCollateralType(
    _collateralAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMinterCollateralType(address,uint256)"(
    _collateralAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ammLpPools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  "ammLpPools(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  ammLpRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "ammLpRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  ammLpUserInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "ammLpUserInfo(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  decayBase(overrides?: CallOverrides): Promise<BigNumber>;

  "decayBase()"(overrides?: CallOverrides): Promise<BigNumber>;

  depositAmmLpTokens(
    _lpAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositAmmLpTokens(address,uint256)"(
    _lpAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositMinter(
    _collateralAddress: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositMinter(address,address,uint256)"(
    _collateralAddress: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  epochLength(overrides?: CallOverrides): Promise<BigNumber>;

  "epochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  genesisTs(overrides?: CallOverrides): Promise<BigNumber>;

  "genesisTs()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAmmLpPoolInfo(
    _lpAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  "getAmmLpPoolInfo(address)"(
    _lpAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  getMinterLpPoolInfo(
    _collateralAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  "getMinterLpPoolInfo(address)"(
    _collateralAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  haloChestContract(overrides?: CallOverrides): Promise<string>;

  "haloChestContract()"(overrides?: CallOverrides): Promise<string>;

  haloTokenAddress(overrides?: CallOverrides): Promise<string>;

  "haloTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  isValidAmmLp(_lpAddress: string, overrides?: CallOverrides): Promise<boolean>;

  "isValidAmmLp(address)"(
    _lpAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidMinterLp(
    _collateralAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidMinterLp(address)"(
    _collateralAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastHaloVestRewardTs(overrides?: CallOverrides): Promise<BigNumber>;

  "lastHaloVestRewardTs()"(overrides?: CallOverrides): Promise<BigNumber>;

  minterContract(overrides?: CallOverrides): Promise<string>;

  "minterContract()"(overrides?: CallOverrides): Promise<string>;

  minterLpPools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  "minterLpPools(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      whitelisted: boolean;
      allocPoint: BigNumber;
      lastRewardTs: BigNumber;
      accHaloPerShare: BigNumber;
    }
  >;

  minterLpRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "minterLpRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  minterLpUserInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  "minterLpUserInfo(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingAmmLpUserRewards(
    _lpAddress: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingAmmLpUserRewards(address,address)"(
    _lpAddress: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingMinterLpUserRewards(
    _collateralAddress: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingMinterLpUserRewards(address,address)"(
    _collateralAddress: string,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingVestingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingVestingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  releaseVestedRewards(overrides?: Overrides): Promise<ContractTransaction>;

  "releaseVestedRewards()"(overrides?: Overrides): Promise<ContractTransaction>;

  removeAmmLp(
    _lpAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAmmLp(address)"(
    _lpAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinterCollateralType(
    _collateralAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinterCollateralType(address)"(
    _collateralAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAmmLpAlloc(
    _lpAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAmmLpAlloc(address,uint256)"(
    _lpAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGenesisTs(
    _genesisTs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGenesisTs(uint256)"(
    _genesisTs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setHaloChest(
    _haloChest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setHaloChest(address)"(
    _haloChest: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinter(
    _minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinter(address)"(
    _minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinterLpAlloc(
    _collateralAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinterLpAlloc(address,uint256)"(
    _collateralAddress: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  "startingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmmLpAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAmmLpAllocationPoints()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmmLpAllocs(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAmmLpAllocs()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalMinterLpAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

  "totalMinterLpAllocationPoints()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalMinterLpAllocs(overrides?: CallOverrides): Promise<BigNumber>;

  "totalMinterLpAllocs()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAmmRewardPool(
    _lpAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAmmRewardPool(address)"(
    _lpAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMinterRewardPool(
    _collateralAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMinterRewardPool(address)"(
    _collateralAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vestingRewardsDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "vestingRewardsDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  vestingRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "vestingRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawAmmLpTokens(
    _lpAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAmmLpTokens(address,uint256)"(
    _lpAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawMinter(
    _collateralAddress: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawMinter(address,address,uint256)"(
    _collateralAddress: string,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawPendingAmmLpRewards(
    _lpAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawPendingAmmLpRewards(address)"(
    _lpAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawPendingMinterLpRewards(
    _collateralAddress: string,
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawPendingMinterLpRewards(address,address)"(
    _collateralAddress: string,
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAmmLp(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAmmLp(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addMinterCollateralType(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMinterCollateralType(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ammLpPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    "ammLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    ammLpRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "ammLpRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    ammLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "ammLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    decayBase(overrides?: CallOverrides): Promise<BigNumber>;

    "decayBase()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "epochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisTs(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisTs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAmmLpPoolInfo(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    "getAmmLpPoolInfo(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    getMinterLpPoolInfo(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    "getMinterLpPoolInfo(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    haloChestContract(overrides?: CallOverrides): Promise<string>;

    "haloChestContract()"(overrides?: CallOverrides): Promise<string>;

    haloTokenAddress(overrides?: CallOverrides): Promise<string>;

    "haloTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    isValidAmmLp(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidAmmLp(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidMinterLp(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidMinterLp(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastHaloVestRewardTs(overrides?: CallOverrides): Promise<BigNumber>;

    "lastHaloVestRewardTs()"(overrides?: CallOverrides): Promise<BigNumber>;

    minterContract(overrides?: CallOverrides): Promise<string>;

    "minterContract()"(overrides?: CallOverrides): Promise<string>;

    minterLpPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    "minterLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        whitelisted: boolean;
        allocPoint: BigNumber;
        lastRewardTs: BigNumber;
        accHaloPerShare: BigNumber;
      }
    >;

    minterLpRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "minterLpRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    minterLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    "minterLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingAmmLpUserRewards(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingAmmLpUserRewards(address,address)"(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMinterLpUserRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingMinterLpUserRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingVestingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingVestingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseVestedRewards(overrides?: CallOverrides): Promise<void>;

    "releaseVestedRewards()"(overrides?: CallOverrides): Promise<void>;

    removeAmmLp(_lpAddress: string, overrides?: CallOverrides): Promise<void>;

    "removeAmmLp(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinterCollateralType(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMinterCollateralType(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAmmLpAlloc(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAmmLpAlloc(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGenesisTs(
      _genesisTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGenesisTs(uint256)"(
      _genesisTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHaloChest(_haloChest: string, overrides?: CallOverrides): Promise<void>;

    "setHaloChest(address)"(
      _haloChest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    "setMinter(address)"(
      _minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinterLpAlloc(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinterLpAlloc(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "startingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmmLpAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmmLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAmmLpAllocs(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmmLpAllocs()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinterLpAllocationPoints(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalMinterLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMinterLpAllocs(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMinterLpAllocs()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAmmRewardPool(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAmmRewardPool(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinterRewardPool(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMinterRewardPool(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingRewardsDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingRewardsDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    vestingRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPendingAmmLpRewards(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawPendingAmmLpRewards(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPendingMinterLpRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawPendingMinterLpRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AmmRewardPoolUpdated(
      lpAddress: null,
      accHaloPerShare: null,
      lastRewardTs: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { lpAddress: string; accHaloPerShare: BigNumber; lastRewardTs: BigNumber }
    >;

    DepositLPTokens(
      user: string | null,
      lpAddress: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpAddress: string; amount: BigNumber }
    >;

    DepositMinter(
      user: string | null,
      collateralAddress: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; collateralAddress: string; amount: BigNumber }
    >;

    Log(
      loc: null,
      ts: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { loc: BigNumber; ts: BigNumber }
    >;

    MinterRewardPoolUpdated(
      collateralAddress: null,
      accHaloPerShare: null,
      lastRewardTs: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        collateralAddress: string;
        accHaloPerShare: BigNumber;
        lastRewardTs: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    VestedRewardsReleased(
      amount: null,
      timestamp: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; timestamp: BigNumber }
    >;

    WithdrawLPTokens(
      user: string | null,
      lpAddress: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; lpAddress: string; amount: BigNumber }
    >;

    WithdrawMinter(
      user: string | null,
      collateralAddress: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; collateralAddress: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAmmLp(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAmmLp(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addMinterCollateralType(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addMinterCollateralType(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ammLpPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ammLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ammLpRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "ammLpRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    ammLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ammLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decayBase(overrides?: CallOverrides): Promise<BigNumber>;

    "decayBase()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    "epochLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisTs(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisTs()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAmmLpPoolInfo(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmmLpPoolInfo(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinterLpPoolInfo(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinterLpPoolInfo(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    haloChestContract(overrides?: CallOverrides): Promise<BigNumber>;

    "haloChestContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    haloTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "haloTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    isValidAmmLp(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidAmmLp(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidMinterLp(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidMinterLp(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastHaloVestRewardTs(overrides?: CallOverrides): Promise<BigNumber>;

    "lastHaloVestRewardTs()"(overrides?: CallOverrides): Promise<BigNumber>;

    minterContract(overrides?: CallOverrides): Promise<BigNumber>;

    "minterContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    minterLpPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "minterLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minterLpRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "minterLpRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    minterLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minterLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAmmLpUserRewards(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingAmmLpUserRewards(address,address)"(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMinterLpUserRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingMinterLpUserRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingVestingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingVestingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseVestedRewards(overrides?: Overrides): Promise<BigNumber>;

    "releaseVestedRewards()"(overrides?: Overrides): Promise<BigNumber>;

    removeAmmLp(_lpAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "removeAmmLp(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMinterCollateralType(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMinterCollateralType(address)"(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAmmLpAlloc(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAmmLpAlloc(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGenesisTs(
      _genesisTs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGenesisTs(uint256)"(
      _genesisTs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setHaloChest(_haloChest: string, overrides?: Overrides): Promise<BigNumber>;

    "setHaloChest(address)"(
      _haloChest: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinter(_minter: string, overrides?: Overrides): Promise<BigNumber>;

    "setMinter(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinterLpAlloc(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinterLpAlloc(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "startingRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmmLpAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmmLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAmmLpAllocs(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmmLpAllocs()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalMinterLpAllocationPoints(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalMinterLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMinterLpAllocs(overrides?: CallOverrides): Promise<BigNumber>;

    "totalMinterLpAllocs()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAmmRewardPool(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAmmRewardPool(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMinterRewardPool(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMinterRewardPool(address)"(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vestingRewardsDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingRewardsDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    vestingRewardsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingRewardsRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawPendingAmmLpRewards(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawPendingAmmLpRewards(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawPendingMinterLpRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawPendingMinterLpRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAmmLp(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAmmLp(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addMinterCollateralType(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMinterCollateralType(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ammLpPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ammLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ammLpRewardsRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ammLpRewardsRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ammLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ammLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decayBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decayBase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisTs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmmLpPoolInfo(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmmLpPoolInfo(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinterLpPoolInfo(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinterLpPoolInfo(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    haloChestContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "haloChestContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    haloTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "haloTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidAmmLp(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidAmmLp(address)"(
      _lpAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidMinterLp(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidMinterLp(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHaloVestRewardTs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastHaloVestRewardTs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minterContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterLpPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minterLpPools(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterLpRewardsRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minterLpRewardsRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterLpUserInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minterLpUserInfo(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAmmLpUserRewards(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingAmmLpUserRewards(address,address)"(
      _lpAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMinterLpUserRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingMinterLpUserRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingVestingRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingVestingRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseVestedRewards(overrides?: Overrides): Promise<PopulatedTransaction>;

    "releaseVestedRewards()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAmmLp(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAmmLp(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMinterCollateralType(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinterCollateralType(address)"(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAmmLpAlloc(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAmmLpAlloc(address,uint256)"(
      _lpAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGenesisTs(
      _genesisTs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGenesisTs(uint256)"(
      _genesisTs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setHaloChest(
      _haloChest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setHaloChest(address)"(
      _haloChest: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinter(
      _minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinter(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinterLpAlloc(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinterLpAlloc(address,uint256)"(
      _collateralAddress: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startingRewards()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmmLpAllocationPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAmmLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmmLpAllocs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAmmLpAllocs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMinterLpAllocationPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalMinterLpAllocationPoints()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMinterLpAllocs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalMinterLpAllocs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAmmRewardPool(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAmmRewardPool(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMinterRewardPool(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMinterRewardPool(address)"(
      _collateralAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vestingRewardsDebt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vestingRewardsDebt()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingRewardsRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vestingRewardsRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAmmLpTokens(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAmmLpTokens(address,uint256)"(
      _lpAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawMinter(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawMinter(address,address,uint256)"(
      _collateralAddress: string,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawPendingAmmLpRewards(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawPendingAmmLpRewards(address)"(
      _lpAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawPendingMinterLpRewards(
      _collateralAddress: string,
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawPendingMinterLpRewards(address,address)"(
      _collateralAddress: string,
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
